#To find the Euclidean Distace Degree (EDD for short) of the steady state varieties, which came from small chemical reaction networks (CRNs), this function was defined.
#EDDInfo takes in a reaction network and returns the steady state equations, generators, ideal (using random reaction rates), singular ideal, dimension of its singular locus, the dimension of the ideal, and the EDD.
#If the dimension of the singular locus is -1, this means it is empty.

EDDInfo = G -> (
    R=createRing(G,QQ);
    h=steadyStateEquations G;
    f=subRandomReactionRates G;
    S=QQ[G.ConcentrationRates];
    g=apply(f,p->sub(p,S));
    I=ideal g;
    u={random(QQ),random(QQ)};
    sing=I+minors(codim I, jacobian I);
    M = (matrix{apply(# gens S, i->(gens S)_i-u_i)})||(transpose(jacobian I));
    J = saturate(I+minors((codim I)+1,M),sing);
    K = saturate(I,sing);
    N = gens gb ideal h;
    print("reaction network:");
    print(G);
    print("steady-state equations:");
    print(h);
    print(concatenate{"generators of the steady state variety: ", toString (entries N)});
    print(concatenate{"steady-state ideal with random rates: ",toString ideal f});
    print(concatenate{"dimension and EDD: ", toString(dim J, degree J)});
    print(concatenate{"singular ideal: ", toString(sing)});
    print(concatenate{"dimension of singular locus: ", toString(dim sing)}); 
    print(concatenate{"generators of the singular ideal: ", toString(entries gens gb sing)});
    print(concatenate{"saturation of the singular ideal in the steady-state ideal: ", toString K}); 
)

#This is the original function created for finding the EDD of the steady state varieties defined by the given small CRNs. 
#It returns less information about the network's steady state variety, but still includes the essentials.

EDD = G -> (
    R=createRing(G,QQ);
    f=subRandomReactionRates G; 
    S=QQ[G.ConcentrationRates]; 
    g=apply(f,p->sub(p,S)); 
    I=ideal g; 
    u={random(QQ),random(QQ)}; 
    sing=I+minors(codim I, jacobian I); 
    M = (matrix{apply(# gens S, i->(gens S)_i-u_i)})||(transpose(jacobian I));
    J = saturate(I+minors((codim I)+1,M),sing);
    print(G);
    print(concatenate{"dimension and EDD: ", toString(dim J, degree J)}))
