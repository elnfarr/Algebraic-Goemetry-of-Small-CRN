#To read in the CRNs from the onine database, we used the following functions to convert the list of numbers into a list of CRNs.
#The edges listed in the data is converted into LHS (L2) and RHS (R2) matrices that represent the coefficients of the CRNs.
#These L2 and R2 are then turned into one large matrix which houses all of the CRNs from the original file.
#Before use, need to load the ReactionNetworks and ReflexivePolytopesDB packages.
#Here, the loaded file was called "fn3".

get fn3;

codes = apply(lines get fn3, s-> flatten entries matrixFromString s)
edges = for c in codes list(t = drop(c, 2); while #t > 0 list (t_0, t_1) do t = drop(t,2))   
m = (codes_0)_0
n = (codes_0)_1

R = matrix table(n,m, (i,j) -> number(edges_0, e -> e == (j,i+m)) ) 
L = matrix table(n,m, (i,j) -> number(edges_0, e -> e == (i+m,j)) ) 
#Formats the edges list into of text file rows into columns of CRN coefficients
                            
R2 = apply (edges, f -> matrix table(n,m, (i,j) -> number(f, e -> e == (j,i+m)) ));
L2 = apply (edges, f -> matrix table(n,m, (i,j) -> number(f, e -> e == (i+m,j)) ));

crnRing = QQ[A, B]
varMatrix = vars crnRing
makeCRN = (m, LHS, RHS) -> (
    myList = apply (m, i -> concatenate(toString((flatten entries LHS_0)_i), " --> ", toString((flatten entries RHS_0)_i)) ); --concatenates and formats the CRNs
    myList2 = apply (m, i -> concatenate separate("[*]", myList_i)); --removes star
    myCRN = reactionNetwork apply(myList2, s -> replace( "0", "0A", s )) --changes 0 into o times a variable
    )

#Due to our llimited computing power, we split the original data into four parts and ran the functions for each part individually.
#An example of this is below for clarity incase you run into the same problem.

Iteration = for g from 0 to 52 list makeCRN(m, varMatrix*(L2_{g}), varMatrix*(R2_{g}))


#To find the Euclidean Distace Degree (EDD for short) of the steady state varieties, which came from small chemical reaction networks (CRNs), this function was defined.
#EDDInfo takes in a reaction network and returns the steady state equations, generators, ideal (using random reaction rates), singular ideal, dimension of its singular locus, the dimension of the ideal, and the EDD.
#If the dimension of the singular locus is -1, this means it is empty.

EDDInfo = G -> (
    R=createRing(G,QQ);
    h=steadyStateEquations G;
    f=subRandomReactionRates G;
    S=QQ[G.ConcentrationRates];
    g=apply(f,p->sub(p,S));
    I=ideal g;
    u={random(QQ),random(QQ)};
    sing=I+minors(codim I, jacobian I);
    M = (matrix{apply(# gens S, i->(gens S)_i-u_i)})||(transpose(jacobian I));
    J = saturate(I+minors((codim I)+1,M),sing);
    K = saturate(I,sing);
    N = gens gb ideal h;
    print("reaction network:");
    print(G);
    print("steady-state equations:");
    print(h);
    print(concatenate{"generators of the steady state variety: ", toString (entries N)});
    print(concatenate{"steady-state ideal with random rates: ",toString ideal f});
    print(concatenate{"dimension and EDD: ", toString(dim J, degree J)});
    print(concatenate{"singular ideal: ", toString(sing)});
    print(concatenate{"dimension of singular locus: ", toString(dim sing)}); 
    print(concatenate{"generators of the singular ideal: ", toString(entries gens gb sing)});
    print(concatenate{"saturation of the singular ideal in the steady-state ideal: ", toString K}); 
)

#This is the original function created for finding the EDD of the steady state varieties defined by the given small CRNs. 
#It returns less information about the network's steady state variety, but still includes the essentials.

EDD = G -> (
    R=createRing(G,QQ);
    f=subRandomReactionRates G; 
    S=QQ[G.ConcentrationRates]; 
    g=apply(f,p->sub(p,S)); 
    I=ideal g; 
    u={random(QQ),random(QQ)}; 
    sing=I+minors(codim I, jacobian I); 
    M = (matrix{apply(# gens S, i->(gens S)_i-u_i)})||(transpose(jacobian I));
    J = saturate(I+minors((codim I)+1,M),sing);
    print(G);
    print(concatenate{"dimension and EDD: ", toString(dim J, degree J)}))

#In addition to the values returned by the EDD function (see Create EDD), this funciton additionally returns the dimension of the Jacobian matrix, and tells you when the codimension of the ideal is infinite. 
#This can be used for a list of CRNs.
#To use, load in the "ReactionNetworks" package before calling the function.

SuperEDD = G ->(
    R1 = createRing(G,QQ); 
    f=subRandomReactionRates G; 
    S=QQ[G.ConcentrationRates]; 
    g=apply(f,p->sub(p,S)); 
    I=ideal g; 
    u={random(QQ),random(QQ)};
    if codim (I) == infinity then return("codimension of I is infinite", G) else
    sing=I+minors(codim I, jacobian I); 
    M = (matrix{apply(# gens S, i->(gens S)_i-u_i)})||(transpose(jacobian I)); 
    J = saturate(I+minors((codim I)+1,M),sing);
    print("network:");
    print G;
    --print("steady-state equations:");
    --print(steadyStateEquations G);
    print(concatenate{"dim(J) and EDD: ", toString(dim J, degree J)});
    print(concatenate{"dim(I): ", toString(dim I)});
    print(concatenate{"degree(I): ", toString(degree I)});
    print(concatenate{"generators of singular locus: ", toString(gens gb sing)});
    print(concatenate{"dimension of singular locus: ", toString(dim sing)});
    print
)

#Sometimes CRNs don't behave as we would like, or return not useful values under the other functions.
#ProblemNetworks tells you which CRNs from a list are "problems". 
#These problematic CRNs occur when the codimention of the Ideal is infinite.

ProblemNetworks = G -> (                         
    R=createRing(G,QQ);
    f=subRandomReactionRates G; 
    S=QQ[G.ConcentrationRates]; 
    g=apply(f,p->sub(p,S)); 
    I=ideal g;
    if codim I == infinity then print G;
    if codim I == infinity then print ""
           
)

